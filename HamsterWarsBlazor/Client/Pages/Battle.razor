@page "/battle"
@using Domain.Entities
@inject HttpClient Http

<PageTitle>Battle</PageTitle>

<div class="p-1 text-center bg-light">
    <h1 class="p-2 px-3 text-uppercase text-primary">Battle</h1>

    @if (hamsters == null)
    {
        <p><em>Loading new battle...</em></p>
    }
    else
    {


        if (hamsters.Length <= 0)
        {
            <p><em>No hamsters here :(</em></p>
        }
        else
        {
            <h4 class="mb-3 text-uppercase text-secondary">
                <span class="text-info">@hamsters[0].Name</span> <span>Versus</span> <span class="text-danger">@hamsters[1].Name</span>
            </h4>

            <div class="row">
                @foreach (var hamster in hamsters)
                {
                    <div class="card-container" @onclick="()=>Vote(hamster)">
                        <HamsterCard hamster="@hamster"></HamsterCard>
                    </div>                    
                }
            </div>
        }
    }
</div>

@code {

    private Hamster[]? hamsters;
    protected override async Task OnInitializedAsync()
    {
        hamsters = await Http.GetFromJsonAsync<Hamster[]?>("api/hamster/random");
    }

    async void Vote(Hamster winner)
    {
        Hamster loser = new Hamster();
        foreach (var hamster in hamsters)
        {
            if (hamster != winner)
            {
                loser = hamster;
            }
        }

        var result = new List<Hamster>();
        result.Add(winner);
        result.Add(loser);

        Console.WriteLine("Voted");
        await Http.PostAsJsonAsync("api/hamster/battleresult", result);
        StateHasChanged();
    }
}
